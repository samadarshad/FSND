{
	"info": {
		"_postman_id": "4f128fa0-93dc-4a28-a2c8-b0d5cf7fa8f6",
		"name": "vaccines-monitor-samad-fsnd",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "as admin: setup",
			"item": [
				{
					"name": "Create patient A",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									"    postman.setEnvironmentVariable(\"patientA_id\", jsonData.patientId);\r",
									"    postman.setEnvironmentVariable(\"patientA_username\", jsonData.email);\r",
									"    postman.setEnvironmentVariable(\"patientA_password\", jsonData.password);\r",
									"});\r",
									"\r",
									"// set patient username and password, pass this onto the patient\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"patientA_postmanTest\", \r\n    \"age\":25, \r\n    \"had_covid\":false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/patients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create patient B",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									"    postman.setEnvironmentVariable(\"patientB_id\", jsonData.patientId);\r",
									"});\r",
									"\r",
									"// set patient username and password, pass this onto the patient\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"patientB_postmanTest\", \r\n    \"age\":30, \r\n    \"had_covid\":true\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/patients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create vaccine A",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									"    postman.setEnvironmentVariable(\"vaccineA_id\", jsonData.id);\r",
									"});\r",
									"\r",
									"// set patient username and password, pass this onto the patient\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"vaccineA_postmanTest\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/vaccines",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"vaccines"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create vaccine B",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									"    postman.setEnvironmentVariable(\"vaccineB_id\", jsonData.id);\r",
									"});\r",
									"\r",
									"// set patient username and password, pass this onto the patient\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"vaccineA_postmanTest\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/vaccines",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"vaccines"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"username = pm.collectionVariables.get('admin_username')",
							"password = pm.collectionVariables.get('admin_password')",
							"",
							"var getToken = true;",
							"",
							"if (!pm.environment.get('accessTokenExpiry') || ",
							"    !pm.environment.get('currentAccessToken')) {",
							"    console.log('Token or expiry date are missing')",
							"} else if (pm.environment.get('accessTokenExpiry') <= (new Date()).getTime()) {",
							"    console.log('Token is expired')",
							"} else {",
							"    getToken = false;",
							"    console.log('Token and expiry date are all good');",
							"}",
							"",
							"if (pm.environment.get('username') != username) {",
							"    getToken = true;",
							"    console.log('Need to get new token for new username');",
							"}",
							"",
							"if (getToken === true) {",
							"",
							"    pm.environment.set('username', username)",
							"    pm.environment.set('password', password)",
							"",
							"    const echoPostRequest = {",
							"    url: 'https://' + pm.collectionVariables.get('auth0_url') + '.auth0.com/oauth/token',",
							"    method: 'POST',",
							"    header: 'Content-Type:application/json',",
							"    body: {",
							"        mode: 'application/json',",
							"        raw: JSON.stringify(",
							"            {",
							"                client_id: pm.collectionVariables.get('auth0_client_id'),",
							"                client_secret: pm.collectionVariables.get('auth0_client_secret'),",
							"                audience: pm.collectionVariables.get('auth0_audience'),",
							"                grant_type:'password',",
							"                username: pm.environment.get('username'),",
							"                password: pm.environment.get('password')",
							"            })",
							"    }",
							"    };",
							"",
							"",
							"    pm.sendRequest(echoPostRequest, function (err, res) {",
							"    console.log(err ? err : res.json());",
							"        if (err === null) {",
							"            console.log('Saving the token and expiry date')",
							"            var responseJson = res.json();",
							"            pm.environment.set('currentAccessToken', responseJson.access_token)",
							"    ",
							"            var expiryDate = new Date();",
							"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);",
							"            pm.environment.set('accessTokenExpiry', expiryDate.getTime());",
							"        }",
							"    });",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "public",
			"item": [
				{
					"name": "401 Unauthenticated",
					"item": [
						{
							"name": "Cant read tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tests",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cant delete a vaccine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/vaccines/{{vaccineA_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"vaccines",
										"{{vaccineA_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cant delete a patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/patients/{{patientA_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patients",
										"{{patientA_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cant read patients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/patients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cant read a patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/patients/{{patientA_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patients",
										"{{patientA_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cant update a vaccine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/vaccines/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"vaccines",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Can read vaccines",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/vaccines",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"vaccines"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can read a vaccine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/vaccines/{{vaccineA_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"vaccines",
								"{{vaccineA_id}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Public can only view vaccines",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "patientA",
			"item": [
				{
					"name": "403 Forbidden",
					"item": [
						{
							"name": "Cant read all patients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/patients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cant delete self",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/patients/{{patientA_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patients",
										"{{patientA_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cant add vaccine to self",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/patients/{{patientA_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patients",
										"{{patientA_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cant read tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tests",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cant add new patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/patients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cant access other patient's info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/patients/{{patientB_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patients",
										"{{patientB_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Can read own information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/patients/{{patientA_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patients",
								"{{patientA_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can update own information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"updated_name\", \r\n    \"age\":30, \r\n    \"had_covid\":true\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/patients/{{patientA_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patients",
								"{{patientA_id}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Patient1 can do what public can do, and only view and update data for patient 1.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"username = pm.environment.get('patientA_username')",
							"password = pm.environment.get('patientA_password')",
							"",
							"var getToken = true;",
							"",
							"if (!pm.environment.get('accessTokenExpiry') || ",
							"    !pm.environment.get('currentAccessToken')) {",
							"    console.log('Token or expiry date are missing')",
							"} else if (pm.environment.get('accessTokenExpiry') <= (new Date()).getTime()) {",
							"    console.log('Token is expired')",
							"} else {",
							"    getToken = false;",
							"    console.log('Token and expiry date are all good');",
							"}",
							"",
							"if (pm.environment.get('username') != username) {",
							"    getToken = true;",
							"    console.log('Need to get new token for new username');",
							"}",
							"",
							"if (getToken === true) {",
							"",
							"    pm.environment.set('username', username)",
							"    pm.environment.set('password', password)",
							"",
							"    const echoPostRequest = {",
							"    url: 'https://' + pm.collectionVariables.get('auth0_url') + '.auth0.com/oauth/token',",
							"    method: 'POST',",
							"    header: 'Content-Type:application/json',",
							"    body: {",
							"        mode: 'application/json',",
							"        raw: JSON.stringify(",
							"            {",
							"                client_id: pm.collectionVariables.get('auth0_client_id'),",
							"                client_secret: pm.collectionVariables.get('auth0_client_secret'),",
							"                audience: pm.collectionVariables.get('auth0_audience'),",
							"                grant_type:'password',",
							"                username: pm.environment.get('username'),",
							"                password: pm.environment.get('password')",
							"            })",
							"    }",
							"    };",
							"",
							"",
							"    pm.sendRequest(echoPostRequest, function (err, res) {",
							"    console.log(err ? err : res.json());",
							"        if (err === null) {",
							"            console.log('Saving the token and expiry date')",
							"            var responseJson = res.json();",
							"            pm.environment.set('currentAccessToken', responseJson.access_token)",
							"    ",
							"            var expiryDate = new Date();",
							"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);",
							"            pm.environment.set('accessTokenExpiry', expiryDate.getTime());",
							"        }",
							"    });",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "doctor",
			"item": [
				{
					"name": "Manage a patient",
					"item": [
						{
							"name": "Create a patient",
							"item": [
								{
									"name": "Create a patient",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    postman.setEnvironmentVariable(\"patientId_createdByDoctor\", jsonData.patientId);\r",
													"});\r",
													"\r",
													"// set patient username and password, pass this onto the patient\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\":\"postman\", \r\n    \"age\":25, \r\n    \"had_covid\":false\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/patients",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"patients"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read the patient",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patientId",
													"value": "{{patientId}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/patients/{{patientId_createdByDoctor}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"patients",
												"{{patientId_createdByDoctor}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update the patient",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\":\"updated_name\", \r\n    \"age\":30, \r\n    \"had_covid\":true\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/patients/{{patientId_createdByDoctor}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"patients",
												"{{patientId_createdByDoctor}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add vaccines to the patient",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"effective\":true,\r\n    \"vaccine_id\":{{vaccineA_id}}\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/patients/{{patientId_createdByDoctor}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"patients",
												"{{patientId_createdByDoctor}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete the patient",
							"item": [
								{
									"name": "Delete the patient",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/patients/{{patientId_createdByDoctor}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"patients",
												"{{patientId_createdByDoctor}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "The patient is 404 not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/patients/{{patientId_createdByDoctor}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"patients",
												"{{patientId_createdByDoctor}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "403 Forbidden",
					"item": [
						{
							"name": "/research",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/research",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"research"
									]
								}
							},
							"response": []
						},
						{
							"name": "/vaccines/{{vaccineA_id}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/vaccines/{{vaccineA_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"vaccines",
										"{{vaccineA_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/vaccines/{{vaccineA_id}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/vaccines/{{vaccineA_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"vaccines",
										"{{vaccineA_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/vaccines/{{vaccineA_id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/vaccines/{{vaccineA_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"vaccines",
								"{{vaccineA_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/patients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/patients?page=1&items_per_page=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patients"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "items_per_page",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/vaccines",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/vaccines",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"vaccines"
							]
						}
					},
					"response": []
				}
			],
			"description": "Doctor can do everything patients can do, post vaccines to patients records, delete patient, view all patient records, view all vaccines records",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"username = pm.collectionVariables.get('doctor_username')",
							"password = pm.collectionVariables.get('doctor_password')",
							"",
							"var getToken = true;",
							"",
							"if (!pm.environment.get('accessTokenExpiry') || ",
							"    !pm.environment.get('currentAccessToken')) {",
							"    console.log('Token or expiry date are missing')",
							"} else if (pm.environment.get('accessTokenExpiry') <= (new Date()).getTime()) {",
							"    console.log('Token is expired')",
							"} else {",
							"    getToken = false;",
							"    console.log('Token and expiry date are all good');",
							"}",
							"",
							"if (pm.environment.get('username') != username) {",
							"    getToken = true;",
							"    console.log('Need to get new token for new username');",
							"}",
							"",
							"if (getToken === true) {",
							"",
							"    pm.environment.set('username', username)",
							"    pm.environment.set('password', password)",
							"",
							"    const echoPostRequest = {",
							"    url: 'https://' + pm.collectionVariables.get('auth0_url') + '.auth0.com/oauth/token',",
							"    method: 'POST',",
							"    header: 'Content-Type:application/json',",
							"    body: {",
							"        mode: 'application/json',",
							"        raw: JSON.stringify(",
							"            {",
							"                client_id: pm.collectionVariables.get('auth0_client_id'),",
							"                client_secret: pm.collectionVariables.get('auth0_client_secret'),",
							"                audience: pm.collectionVariables.get('auth0_audience'),",
							"                grant_type:'password',",
							"                username: pm.environment.get('username'),",
							"                password: pm.environment.get('password')",
							"            })",
							"    }",
							"    };",
							"",
							"",
							"    pm.sendRequest(echoPostRequest, function (err, res) {",
							"    console.log(err ? err : res.json());",
							"        if (err === null) {",
							"            console.log('Saving the token and expiry date')",
							"            var responseJson = res.json();",
							"            pm.environment.set('currentAccessToken', responseJson.access_token)",
							"    ",
							"            var expiryDate = new Date();",
							"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);",
							"            pm.environment.set('accessTokenExpiry', expiryDate.getTime());",
							"        }",
							"    });",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "researcher",
			"item": [
				{
					"name": "CRUD flow a vaccine",
					"item": [
						{
							"name": "Create a vaccine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    postman.setEnvironmentVariable(\"vaccineId_createdByResearcher\", jsonData.vaccineId);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/vaccines",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"vaccines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get the vaccine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/vaccines/{{vaccineId_createdByResearcher}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"vaccines",
										"{{vaccineId_createdByResearcher}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update the vaccine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/vaccines/{{vaccineId_createdByResearcher}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"vaccines",
										"{{vaccineId_createdByResearcher}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the vaccine>",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/vaccines/{{vaccineId_createdByResearcher}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"vaccines",
										"{{vaccineId_createdByResearcher}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "403 Forbidden",
					"item": [
						{
							"name": "/patients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/patients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patients"
									]
								}
							},
							"response": []
						},
						{
							"name": "/patients/1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/patients/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patients",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/patients/1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/patients/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patients",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/patients/1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/patients/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patients",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/patients/1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/patients/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patients",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/patients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/patients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patients"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Can read tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/research",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"research"
							]
						}
					},
					"response": []
				},
				{
					"name": "/vaccines",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/vaccines",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"vaccines"
							]
						}
					},
					"response": []
				}
			],
			"description": "Researcher can do what public can do, full CRUD on vaccines, and only view research endpoints"
		},
		{
			"name": "admin",
			"item": [
				{
					"name": "Cant delete vaccine after it has been administered to patients",
					"item": [
						{
							"name": "Add vaccines to the patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"effective\":true, \r\n    \"vaccine_id\":{{vaccineA_id}}\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/patients/{{patientA_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patients",
										"{{patientA_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cant delete the vaccine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/vaccines/{{vaccineA_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"vaccines",
										"{{vaccineA_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "as admin: teardown",
			"item": [
				{
					"name": "Delete patients first",
					"item": [
						{
							"name": "Delete patient A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/patients/{{patientA_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patients",
										"{{patientA_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete patient B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// set patient username and password, pass this onto the patient\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/patients/{{patientB_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patients",
										"{{patientB_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "then can delete vaccines",
					"item": [
						{
							"name": "Delete vaccine A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/vaccines/{{vaccineA_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"vaccines",
										"{{vaccineA_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete vaccine B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/vaccines/{{vaccineB_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"vaccines",
										"{{vaccineB_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"username = pm.collectionVariables.get('admin_username')",
							"password = pm.collectionVariables.get('admin_password')",
							"",
							"var getToken = true;",
							"",
							"if (!pm.environment.get('accessTokenExpiry') || ",
							"    !pm.environment.get('currentAccessToken')) {",
							"    console.log('Token or expiry date are missing')",
							"} else if (pm.environment.get('accessTokenExpiry') <= (new Date()).getTime()) {",
							"    console.log('Token is expired')",
							"} else {",
							"    getToken = false;",
							"    console.log('Token and expiry date are all good');",
							"}",
							"",
							"if (pm.environment.get('username') != username) {",
							"    getToken = true;",
							"    console.log('Need to get new token for new username');",
							"}",
							"",
							"if (getToken === true) {",
							"",
							"    pm.environment.set('username', username)",
							"    pm.environment.set('password', password)",
							"",
							"    const echoPostRequest = {",
							"    url: 'https://' + pm.collectionVariables.get('auth0_url') + '.auth0.com/oauth/token',",
							"    method: 'POST',",
							"    header: 'Content-Type:application/json',",
							"    body: {",
							"        mode: 'application/json',",
							"        raw: JSON.stringify(",
							"            {",
							"                client_id: pm.collectionVariables.get('auth0_client_id'),",
							"                client_secret: pm.collectionVariables.get('auth0_client_secret'),",
							"                audience: pm.collectionVariables.get('auth0_audience'),",
							"                grant_type:'password',",
							"                username: pm.environment.get('username'),",
							"                password: pm.environment.get('password')",
							"            })",
							"    }",
							"    };",
							"",
							"",
							"    pm.sendRequest(echoPostRequest, function (err, res) {",
							"    console.log(err ? err : res.json());",
							"        if (err === null) {",
							"            console.log('Saving the token and expiry date')",
							"            var responseJson = res.json();",
							"            pm.environment.set('currentAccessToken', responseJson.access_token)",
							"    ",
							"            var expiryDate = new Date();",
							"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);",
							"            pm.environment.set('accessTokenExpiry', expiryDate.getTime());",
							"        }",
							"    });",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{currentAccessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://vaccines-monitor-samad-fsnd.herokuapp.com"
		},
		{
			"key": "patientA_id",
			"value": ""
		},
		{
			"key": "patientA_username",
			"value": ""
		},
		{
			"key": "patientA_password",
			"value": ""
		},
		{
			"key": "patientB_id",
			"value": ""
		},
		{
			"key": "doctor_username",
			"value": "doctor@vaccines-monitor-samad-fsnd.com"
		},
		{
			"key": "doctor_password",
			"value": "0xT3s1aY5vQmyU"
		},
		{
			"key": "admin_username",
			"value": "admin@vaccines-monitor-samad-fsnd.com"
		},
		{
			"key": "admin_password",
			"value": "0xT3s1aY5vQmyU"
		},
		{
			"key": "researcher_username",
			"value": "researcher@vaccines-monitor-samad-fsnd.com"
		},
		{
			"key": "researcher_password",
			"value": "0xT3s1aY5vQmyU"
		},
		{
			"key": "auth0_url",
			"value": "abdus-samad-fsnd.eu"
		},
		{
			"key": "auth0_client_id",
			"value": "emnU8GDw77TAzTIoy3DxwJpu71adBiti"
		},
		{
			"key": "auth0_client_secret",
			"value": "1HbDnQbg08MS4XC1mPFVNdXquuvIqEuUww89em2gzccHXwHp8UZXTG8PorBmf9jp"
		},
		{
			"key": "auth0_audience",
			"value": "vaccines"
		}
	]
}